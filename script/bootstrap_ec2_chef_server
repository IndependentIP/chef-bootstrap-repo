#!/usr/bin/env bash
#^syntax detection
set -e

### Functions

usage() {
  printf "

Usage

  $(basename $0) --node-name <node_name> [options]

Options

  --node-name <whiskers>  - Name for the Chef Server

  All other options are passed back to the bootstrap knife plugin.

Actions

  help - Display CLI help (this output)

"
}

setup_security_group() {
  local name="$1"

  bundle exec ruby -rfog <<END_OF_RUBY
    def log(msg) ; puts "-----> #{msg}" ; end

    def ip_match?(perm, hash)
      perm["ipProtocol"] == hash[:proto] &&
        perm["fromPort"] == hash[:from] &&
        perm["toPort"] == hash[:to]
    end

    aws = Fog::Compute.new(
      :provider => 'AWS',
      :aws_secret_access_key => ENV['AWS_AWS_SECRET_ACCESS_KEY'],
      :aws_access_key_id => ENV['AWS_AWS_ACCESS_KEY_ID'],
      :region => ENV['AWS_REGION']
    )
    group = aws.security_groups.find { |g| g.name == "${name}" }

    if group.nil?
      log "Creating security group ${name}"
      aws.create_security_group("${name}", "${name} group")
      group = aws.security_groups.find { |g| g.name == "${name}" }
    else
      log "Security group ${name} exists"
    end

    [ {:proto => "icmp", :from => -1, :to => -1},
      {:proto => "tcp", :from => 0, :to => 65535},
      {:proto => "tcp", :from => 22, :to => 22, :cidr => '0.0.0.0/0'},
      {:proto => "tcp", :from => 443, :to => 443, :cidr => '0.0.0.0/0'},
      {:proto => "tcp", :from => 444, :to => 444, :cidr => '0.0.0.0/0'}
    ].each do |p|
    if group.ip_permissions.find { |gp| ip_match?(gp, p) }
        log "Inbound rule for #{p[:proto]} #{p[:from]} -> #{p[:to]} exists"
      else
        log "Creating inbound rule for #{p[:proto]} #{p[:from]} -> #{p[:to]}"

        options = {
          'IpPermissions' => [
            { 'FromPort' => p[:from], 'ToPort' => p[:to],
              'IpProtocol' => p[:proto] }
          ]
        }
        if p[:cidr]
          options['IpPermissions'].first['IpRanges'] = [
            {'CidrIp' => p[:cidr]}
          ]
        else
          options['IpPermissions'].first['Groups'] = [
            { 'GroupName' => group.name, 'UserId' => group.owner_id }
          ]
        end

        aws.authorize_security_group_ingress(group.name, options)
      end
    end
END_OF_RUBY
}


### Parsing CLI Arguments

BOOTSTRAP_ARGS=""
while [[ $# -gt 0 ]] ; do
  token="$1"
  shift

  case "$token" in
    --node-name)
      NODE_NAME="$1"
      shift
      ;;
    --groups|-G)
      SECURITY_GROUP="$1"
      shift
      ;;
    help|usage)
      usage
      exit 0
      ;;
    *)
      BOOTSTRAP_ARGS="$BOOTSTRAP_ARGS $token"
      ;;
  esac
done

if [[ -z "$NODE_NAME" ]] ; then
  printf "A node name was not given.\n"
  usage
  exit 1
fi
if [[ -z "$SECURITY_GROUP" ]] ; then
  SECURITY_GROUP="infrastructure"
fi

export CHEF_SERVER_NAME="$NODE_NAME"

printf -- "-----> Setup configuration of security group ${SECURITY_GROUP}\n"
setup_security_group $SECURITY_GROUP

printf -- "-----> Creating Chef Server with hostname of ${CHEF_SERVER_NAME}\n"
logfile="log/chef-server-$CHEF_SERVER_NAME-$(date +%F).log"
mkdir -p "$(dirname $logfile)"

set -x
knife ec2 server create -d chef-server-debian \
  --node-name $CHEF_SERVER_NAME --groups $SECURITY_GROUP \
  --ssh-user ubuntu $BOOTSTRAP_ARGS | \
  tee -a $logfile

printf -- "\n-----> All done, w00t.\n\n\n"
